[{"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/index.js":"1","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/App.js":"2","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/data/data.js":"3","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Partie/Partie.jsx":"4","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Configuration/Configuration.jsx":"5","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Home/Home.jsx":"6","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Quizz/Quizz.jsx":"7","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Galerie/Galerie.jsx":"8","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Nav/Nav.jsx":"9","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Animation/Animation.jsx":"10","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx":"11","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/data/fake-data.js":"12","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/FicheJoueur/FicheJoueur.jsx":"13","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/PanelAction/PanelAction.jsx":"14","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Modal/Modal.jsx":"15"},{"size":291,"mtime":1687169855354,"results":"16","hashOfConfig":"17"},{"size":680,"mtime":1687270184406,"results":"18","hashOfConfig":"17"},{"size":8296,"mtime":1687342604327,"results":"19","hashOfConfig":"17"},{"size":1174,"mtime":1687267490481,"results":"20","hashOfConfig":"17"},{"size":8624,"mtime":1687342848832,"results":"21","hashOfConfig":"17"},{"size":651,"mtime":1687270548316,"results":"22","hashOfConfig":"17"},{"size":138,"mtime":1686903452593,"results":"23","hashOfConfig":"17"},{"size":913,"mtime":1687169855348,"results":"24","hashOfConfig":"17"},{"size":711,"mtime":1687270191708,"results":"25","hashOfConfig":"17"},{"size":908,"mtime":1687267490474,"results":"26","hashOfConfig":"17"},{"size":10198,"mtime":1687342604326,"results":"27","hashOfConfig":"17"},{"size":10226,"mtime":1687176447407,"results":"28","hashOfConfig":"17"},{"size":9848,"mtime":1687342604324,"results":"29","hashOfConfig":"17"},{"size":9791,"mtime":1687342848833,"results":"30","hashOfConfig":"17"},{"size":726,"mtime":1687267490478,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"xjfz7t",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"35"},"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/index.js",[],[],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/App.js",[],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/data/data.js",["87"],[],"import {\n    v4 as uuidv4\n} from \"uuid\";\n\nexport const data = {\n    enfants: [{\n            nom: \"Gaby\",\n            description: \"Gaby est très maline ! Studieuse et sérieuse, ses parents l'ont envoyé à l'internat car elle commençait à se laisser distraire par les séries disponibles sur les différents plateformes de vidéo à la demande\",\n            deplacement: 3,\n            image: require(\"../assets/img/Gaby.png\"),\n            pv: 2,\n            pouvoir: \"Elle peut relancer un dé qui est dans la zone Réserve de Dé ! Mais ne peut pas l'utiliser.\",\n        },\n        {\n            nom: \"Ambre\",\n            description: \"Ambre est très sportive, jolie mais très égocentrique. Elle diffusait à un peu trop gagner en confiance selon ses parents. Elle diffusait des photos d’elle et de ses résultats sportifs en permanence sur les réseaux sociaux !\",\n            deplacement: 3,\n            image: require(\"../assets/img/Ambre.png\"),\n            pv: 3,\n            pouvoir: \"\",\n        },\n        {\n            nom: \"Paul\",\n            description: \"Paul est timide, discret, voire renfermé, il passe son temps à jouer aux jeux vidéo et à streamer... Ses parents souhaitent qu’il découvre le monde réel et qu’il se fasse de vrais amis.\",\n            deplacement: 3,\n            image: require(\"../assets/img/Paul.png\"),\n            pv: 2,\n            pouvoir: \"Il peut relancer un dé qui est dans la zone Réserve de Dé ! Mais ne peut pas l'utiliser.\",\n        },\n        {\n            nom: \"Ethan\",\n            description: \"Ethan se la pète, il a tout fait, il a tout vu et s’en vante sur les réseaux sociaux et en live sur sa chaine youtube. Il a également tout acheté et tout testé... bref, ses parents veulent lui faire prendre conscience qu’il vaut mieux que ça.\",\n            deplacement: 4,\n            image: require(\"../assets/img/Ethan.png\"),\n            pv: 2,\n            pouvoir: \"\",\n        }\n    ],\n    thematique: {\n        addiction: {\n            nomThematique: \"Addiction\",\n            questions: [{\n                    titre: \"Il est important de vérifier les paramètres de confidentialité de tes comptes de médias sociaux régulièrement pour t'assurer que tes informations personnelles ne sont pas exposées.\",\n                    choix: [\"Vrai\", \"Faux\", \"Je ne sais pas\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                },\n                {\n                    titre: \"Que devrais-tu faire si tu reçois un message en ligne d'une personne que tu ne connais pas ?\",\n                    choix: [\"Répondre au message et demander qui elle est.\", \"Ignorer le message et le supprimer.\", \"Donner tes informations personnelles à la personne.\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                }\n            ],\n            animateurs: [{\n                nom: \"Kenza\",\n                pseudo: \"La Fouineuse\",\n                nomThematique: \"addiction\",\n                maudit: true,\n                deplacement: 3,\n                priorite: 10,\n                objectifs: {\n                    animateurs: {\n                        img: require(\"../assets/img/jeton_cyberharcelement.png\"),\n                        points: 0,\n                    },\n                    enfants: {\n                        points: 0,\n                    }\n                },\n                image: require(\"../assets/img/La_Fouineuse.png\"),\n            }]\n        },\n        cyber_harcelement: { \n            nomThematique: \"Cyber-harcèlement\",\n            questions: [{\n                    titre: \"Quels sont les effets du cyberharcèlement ?\",\n                    choix:  [\n                            \"Mentalement : on se sent touché, dans l’embarras, stupide ou même en colère\",\n                            \"Emotionnellement : on a honte ou on a moins d’intérêt pour les choses que l’on apprécie\",\n                            \"Physiquement : on est fatigué (perte de sommeil) ou on fait l’expérience de douleurs comme des maux de ventre ou de crâne\",\n                    ],\n                    bonne_reponse: [0, 1, 2],\n                    ressource: \"https://www.unicef.fr/convention-droits-enfants/protection/maltraitances-infantiles/harcelement-et-violence-lecole/\"\n                },\n                {\n                    titre: \"Y a-t-il des sanctions au cyberharcèlement en France ?\",\n                    choix: [\"Vrai\", \"Faux\", \"Je ne sais pas\"],\n                    bonne_reponse: 0,\n                    ressource: \"https://www.unicef.fr/convention-droits-enfants/protection/maltraitances-infantiles/harcelement-et-violence-lecole/\"\n                }\n            ],\n            animateurs: [{\n                nom: \"Kevin\",\n                pseudo: \"Aninomous\",\n                nomThematique: \"cyber_harcelement\",\n                maudit: true,\n                deplacement: 3,\n                priorite: 9,\n                objectifs: {\n                    animateurs: {\n                        img: require(\"../assets/img/jeton_cyberharcelement.png\"),\n                        points: 0,\n                    },\n                    enfants: {\n                        points: 0,\n                    }\n                },\n                image: require(\"../assets/img/Aninomous.png\")\n            }]\n        },\n        securite: {\n            nomThematique: \"Cyber-sécurité\",\n            questions: [{\n                    titre: \"Est-il sûr d'utiliser le même mot de passe pour tous tes comptes en ligne ?\",\n                    choix: [\"Vrai\", \"Faux\", \"Je ne sais pas\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                },\n                {\n                    titre: \"Qu'est-ce que tu peux faire pour protéger ton ordinateur des méchants virus et logiciels espions ?\",\n                    choix: [\"Ouvrir tous les liens et pièces jointes que tu reçois par e-mail, même s'ils sont étranges.\", \"Mettre à jour régulièrement ton antivirus et scanner ton ordinateur.\", \"Télécharger des applications à partir de n'importe quel site.\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                }\n            ],\n            animateurs: [{\n                nom: \"David\",\n                pseudo: \"Mr.Trollolol\",\n                nomThematique: \"securite\",\n                maudit: true,\n                deplacement: 3,\n                priorite: 7,\n                objectifs: {\n                    animateurs: {\n                    img: require(\"../assets/img/jeton_cyberharcelement.png\"),\n                        points: 0,\n                    },\n                    enfants: {\n                        points: 0,\n                    }\n                },\n                image: require(\"../assets/img/Mr_Trollolol.png\")\n\n            }]\n        },\n        fake_news: {\n            nomThematique: \"Fake News\",\n            questions: [{\n                    titre: \"Les fake news sont de fausses informations délibérément créées pour tromper les gens.\",\n                    choix: [\"Vrai\", \"Faux\", \"Je ne sais pas\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                },\n                {\n                    titre: \"Comment peux-tu savoir si une information est une fake news ou non ?\",\n                    choix: [\"Croire en tout ce que tu vois sur Internet\", \"Vérifier la source de l'information et chercher d'autres sources fiables.\", \"Partager l'information immédiatement avec tous tes amis.\"],\n                    bonne_reponse: 1,\n                    ressource: \"\"\n                }\n            ],\n            animateurs: [{\n                nom: \"Yuki\",\n                pseudo: \"Hyperco\",\n                nomThematique: \"fake_news\",\n                maudit: true,\n                deplacement: 4,\n                priorite: 8,\n                objectifs: {\n                    animateurs: {\n                        img: require(\"../assets/img/jeton_cyberharcelement.png\"),\n                        points: 0,\n                    },\n                    enfants: {\n                        points: 0,\n                    }\n                },\n                image: require(\"../assets/img/Hyperco.png\")\n            }]\n        }\n    }\n}","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Partie/Partie.jsx",["88"],[],"import Configuration from '../Configuration/Configuration';\nimport { useState, useRef,useEffect } from 'react';\nimport Suivi from '../Suivi/Suivi';\n\nexport default function Partie() {\n\n  const [tabEnfantsChoisis, setTabEnfantsChoisis] = useState([]);\n  const [tabAnimateursChoisis, setTabAnimateursChoisis] = useState([]);\n  const [displaySuiviComponent, setDisplaySuiviComponent] = useState(false);\n\n    useEffect(() => {\n      console.log(tabEnfantsChoisis);\n      console.log(tabAnimateursChoisis);\n      console.log(displaySuiviComponent);\n    });\n\n    // TODO gestion des affichages (affichers d'abord component config puis animation)\n    return (\n          <div>\n                {!displaySuiviComponent &&\n                    <Configuration joueursChoisis={tabEnfantsChoisis} setJoueursChoisis={setTabEnfantsChoisis} animateursChoisis ={tabAnimateursChoisis} setAnimateursChoisis={setTabAnimateursChoisis} setAffichageSuiviComponent={setDisplaySuiviComponent}/>\n                }\n\n                {displaySuiviComponent &&\n                   <Suivi joueursChoisis={tabEnfantsChoisis} animateursChoisis ={tabAnimateursChoisis}/>\n                }\n          </div>\n  )\n}","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Configuration/Configuration.jsx",["89","90","91","92","93","94","95","96","97"],[],"import { data } from '../../data/data';\nimport { useState, useRef } from 'react';\nimport de from '../../assets/img/de.svg';\nimport stalkyProfil from '../../assets/img/perso-stalky.svg';\nimport choisiIcon from '../../assets/img/persoValide.svg';\n\nexport default function Configuration({joueursChoisis,setJoueursChoisis, animateursChoisis, setAnimateursChoisis,setAffichageSuiviComponent}) {\n\n    let listJoueurs = data.enfants;\n    let listAnimateurs = [];\n    let thematique = data.thematique;\n    let [tabJoueursChoisis, setTabJoueursChoisis] = useState([]);\n    let [tabAnimateursChoisis, setTabAnimateursChoisis] = useState([]);\n    let [etapesConfiguration, setEtapesConfiguration] = useState(0);\n    let [nbJoueursChoisi, setNbJoueursChoisi] = useState(0);\n    const nbjoueursTab = [2, 3, 4];\n\n    // recup de la liste des animateurs \n   for (const property in thematique) {\n        let listAnimateurParThematique = thematique[property].animateurs;\n        for (const index in listAnimateurParThematique) {\n            listAnimateurs.push(listAnimateurParThematique[index]);\n        }\n   }\n\n    const choisirNombreJoueur = (nbJoueur) => {\n        setNbJoueursChoisi(nbJoueur);\n        tabJoueursChoisis = [];\n        document.getElementById('joueurTotal_'+nbJoueur).style.backgroundColor = \"#4fab78\";\n        // changer le numéro de l'étape de la config 0 -> 1\n        setEtapesConfiguration(1);\n    }\n\n    const choixJoueur = (joueur) => {\n        if (tabJoueursChoisis.length < (nbJoueursChoisi)) {\n            //console.log(joueur);\n            tabJoueursChoisis.push(joueur.enfant);\n            document.getElementById('profileOpacity_'+joueur.enfant.nom).classList.add('ajoutBackgroundChoisi');\n            document.getElementById('profileChecked_'+joueur.enfant.nom).style.display = 'block';\n\n        }\n        else {\n            console.log('cannot add more players');\n        }\n    }\n\n\n    const choixAnimateur = (animateur) => {\n        if (tabAnimateursChoisis.length < (nbJoueursChoisi)) {\n            tabAnimateursChoisis.push(animateur.animateur);\n            document.getElementById('profileOpacity_'+animateur.animateur.nom).classList.add('ajoutBackgroundChoisi');\n            document.getElementById('profileChecked_'+animateur.animateur.nom).style.display = 'block';\n\n        }\n        else {\n            console.log('cannot add more animateurs');\n        }\n         console.log(tabAnimateursChoisis);\n        // console.log('joueurs choisis : '+tabJoueursChoisis.length);\n    }\n\n    const changerEtapeConfiguration = (etape) => {\n      setEtapesConfiguration(etape);\n    }\n\n    const changeViewToAnimationComponent = () => {\n        setJoueursChoisis(tabJoueursChoisis);\n        setAnimateursChoisis(tabAnimateursChoisis);\n        setAffichageSuiviComponent(true);\n    }\n\n    return (\n        <div id=\"configurationContainer\">\n            <div>           \n              {/* CHOIX DU NOMBRE DE JOUEURS */}\n              { etapesConfiguration === 0 && (\n                    <div id='choixNombreJoueur'>\n                        <p className='subTitle'>Combien de personnes jouent ? </p>\n                        <div>\n                            <button id='joueurTotal_2' onClick={() => choisirNombreJoueur(2)}>\n                                <p>2</p>\n                                {/*<img src={joueurIcon}/>*/}\n                            </button>\n                            <button id='joueurTotal_3' onClick={() => choisirNombreJoueur(3)}>\n                                <p>3</p>\n                                {/*<img src={joueurIcon}/>*/}\n                            </button>\n                            <button id='joueurTotal_4' onClick={() => choisirNombreJoueur(4)}>\n                                <p>4</p>\n                                {/*<img src={joueurIcon}/>*/}\n                            </button>\n\n                            {/*\n                                {nbjoueursTab.map(nbJoueur =>   \n                                    <button id={'joueurTotal_'+nbJoueur} onClick={() => choisirNombreJoueur(nbJoueur)}>\n                                        \n                                        {nbJoueur}\n                                    </button>\n                                )}\n                            */}\n                        </div>\n                        \n                    </div>\n               )}\n\n              {/* CHOIX DES JOUEURS */}\n              { etapesConfiguration === 1 && (\n                        <div>\n                            <div id='joueursEnfants'>\n                                    <p className='subTitle'>Quels joueurs jouent ?</p>\n                                    <div className='joueursEnfants_list'>\n                                        {listJoueurs.map(enfant =>\n                                         <div className='enfantInfos' id= {'joueur_'+enfant.nom} onClick={() => choixJoueur({enfant})} >\n                                            <div className='profil'>\n                                                <div className='profil_containerImg'>\n                                                    <div className='profileOpacity' id={'profileOpacity_'+enfant.nom}></div>\n                                                    <div className='profileChecked' id={'profileChecked_'+enfant.nom}><img src={choisiIcon}/></div>\n                                                    <img className='profil_photo' src={stalkyProfil} />\n                                                </div>\n                                            </div>\n                                            <p className='persoNom'>{enfant.nom}</p>\n                                        </div>)}\n                                    </div>                            \n                            </div>\n                            <button className='buttonChoixPerso'  onClick={() => changerEtapeConfiguration(2)}>Continuer</button>\n                    \n                        </div>\n               )}\n\n              {/* CHOIX DES ANIMATEURS */}\n              { etapesConfiguration === 2 && (\n                    <>\n                        <div id='animateurs'>\n                                <p className='subTitle'>Quels animateurs jouent ?</p>\n                                <div className='animateurs_list'>\n                                         {listAnimateurs.map(animateur =>\n                                            <div className='animateurInfos' id= {'animateur_'+animateur.nom} onClick={() => choixAnimateur({animateur})} >\n                                                <div className='profil'>\n                                                    <div className='profil_containerImg'>\n                                                        <div className='profileOpacity' id={'profileOpacity_'+animateur.nom}></div>\n                                                        <div className='profileChecked' id={'profileChecked_'+animateur.nom}><img src={choisiIcon}/></div>\n                                                        <img className='profil_photo' src={stalkyProfil} />\n                                                    </div>\n                                                </div>\n                                                <p className='persoNom'>{animateur.nom}</p>\n                                            </div>\n                                         )}\n                                </div>\n                        </div>\n                        <button className='buttonChoixPerso'  onClick={() => changerEtapeConfiguration(3)}>Débuter la partie</button>\n                    </>\n              )}\n\n\n              {/* INSTALL DU PLATEAU DE JEU  */}\n              { etapesConfiguration === 3 && (\n                <>\n                    <div id='installationPlateau'>\n                        <p className='subTitle'>DÉBUT DU TOUR</p>\n                        <img src={de} />\n                        <ul>\n                            <li>\n                                <div className='etapeImg'>1</div> \n                                <p>Lancez vos dés tous ensembles</p>\n                            </li>\n                            <li>\n                                <div className='etapeImg'>2</div> \n                                <p> Puis regroupez les dans la \"réserve de dés\"</p>\n                            </li>\n                        </ul>\n                    </div>\n                    <button className='buttonChoixPerso' onClick={() => changeViewToAnimationComponent()} >Continuer</button>\n                </>\n              )}\n            </div>\n        </div>\n    )\n}\n\n","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Home/Home.jsx",["98"],[],"import { useNavigate } from \"react-router-dom\";\nimport logo from  '../../assets/img/logo_xl.svg';\n\nexport default function Home() {\n    const navigate = useNavigate();\n    const navigateTo = (route) => {\n        navigate(route);\n    }\n\n    return (\n        <div id=\"home\">\n                <img src={logo} />\n            <div className='accueilBtns'>\n                <button  onClick={() => navigateTo(\"/partie\")} >Commencer une partie</button>\n                <button  onClick={() => navigateTo(\"/quizzs\")} >Carte Quizz</button>\n                <button onClick={() => navigateTo(\"/galerie\")} >Galerie</button>\n            </div>\n        </div>\n    )\n}","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Quizz/Quizz.jsx",[],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Galerie/Galerie.jsx",[],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Nav/Nav.jsx",["99","100","101","102","103"],[],"import { useNavigate } from \"react-router-dom\";\nimport { slide as Menu } from 'react-burger-menu';\nimport logoNav from '../../assets/img/logo-nav.svg';\n\nexport default function Nav() {\n    const navigate = useNavigate();\n    const navigateTo = (route) => {\n        navigate(route);\n    }\n    return (\n        <nav>\n            <img src={logoNav} />\n            <Menu right>\n                <a  onClick={() => navigateTo(\"/\")} >Accueil</a>\n                <a  onClick={() => navigateTo(\"/partie\")} >Commencer une partie</a>\n                <a  onClick={() => navigateTo(\"/quizzs\")} >Carte Quizz</a>\n                <a onClick={() => navigateTo(\"/galerie\")} >Galerie</a>\n            </Menu>\n        </nav>\n    )\n}","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Animation/Animation.jsx",["104","105","106","107"],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx",["108"],[],"import { useState, useEffect } from 'react';\nimport { data } from '../../data/data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport PanelAction from '../PanelAction/PanelAction';\nexport default function Suivi({ joueursChoisis, animateursChoisis }) { // param -> data passé par Maria\n    /**\n     *\n     * params : tableau des animateurs trié , tableau des enfants choisies\n     *\n     * Conditions d'affichage de vues\n     *  - Affichage des infos de l'animateur\n     *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n     *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n     *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n    */\n    // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n    //let animateursTries = [];\n    //const thematiques = data.thematique;\n    let animateursTries = animateursChoisis;\n    // Il faut récupérer chaque animateur de chaque thématique\n    /*\n    Object.keys(thematiques).forEach((theme) => {\n        const animateurs = thematiques[theme].animateurs;\n        animateursTries.push(...animateurs);\n    });\n    //*/\n    // Tri des animateurs par priorité (ordre décroissant)\n    animateursTries.sort((a, b) => b.priorite - a.priorite);\n    // console.log('----- Animateurs Triés en ordre décroissant -----');\n    // console.log(animateursTries);\n    // console.log('-------------------------------------------------');\n    // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n    //\n    //const enfants = data.enfants;\n    const enfants = joueursChoisis;\n    // fausse data en attendant de recevoir\n    const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n    // Le nb de joueurs choisis\n    const nbDeJoueurs = enfants.length;\n    const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n    // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n    const [nbManches, setNbManches] = useState(1);\n    const nbManchesMax = 10;\n    const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n    const [nbTourActuel, setNbTourActuel] = useState(0);\n    const deplacerJoueur = (index, nouvelIndex) => {\n        const joueursEnfantCopies = [...enfantsChoisis];\n        const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n        joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n        setEnfantsChoisis(joueursEnfantCopies);\n    };\n    const [ordreFinal, setOrdreFinal] = useState([]);\n    // Il faut générer un nouvel ordre pour la suite du jeu\n    const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n        const nouvelOrdre = [];\n        const nbJoueurs = ordreJoueursEnfant.length;\n        const nbAnimateurs = animateursTries.length;\n        // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n        const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n        // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n        for (let i = 0; i < nbTours; i++) {\n            const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n            const animateur = animateursTries[i % nbAnimateurs];\n            nouvelOrdre.push(animateur);\n            nouvelOrdre.push(joueurEnfant);\n        }\n        return nouvelOrdre;\n    };\n    // nbTours -> correspond au nombre de tours dans une manche\n    // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n    const gestionNbTours = () => {\n        // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n        setNbTourActuel(nbTourActuel + 1);\n        if (nbTourActuel % 2 === 0) {\n            setRoleActuel('animateur');\n        } else {\n            setRoleActuel('enfant');\n        }\n        // Vérifie si la manche est terminée après chaque tour\n        gestionNbManche();\n    };\n    const gestionNbManche = () => {\n        // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n        if (nbTourActuel >= nbTours) {\n            setNbManches(nbManches + 1); // Passage à la prochaine manche\n            setNbTourActuel(1);\n            setRoleActuel('animateur');\n        }\n        if (nbManches > nbManchesMax && enfantsChoisis.length === 0) {\n            setNbManches(11); \n        }\n    };\n    const joueurActuel = nbTourActuel > 1 ? ordreFinal[nbTourActuel - 1] : animateursChoisis[0];\n    // État pour stocker l'ordre des joueurs \"enfant\"\n    const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n    const thematiques = data.thematique;\n    const nomDuJoueurActuel = joueurActuel.nom ? joueurActuel.nom : animateursChoisis[0].nom;\n    const [thematiqueActuel, setThematiqueActuel] = useState('');\n    // Récupérer le nom de tous les animateurs et ensuite le comparer au nom du joueur actuel pour récup la bonne thématique\n    const recupThematiqueActuel = () => {\n        const entriesTab = Object.keys(thematiques).map((key) => thematiques[key]);\n        const nomDesAnimateurs = [];\n        for (let i = 0; i < entriesTab.length; i++) {\n            const animateurs = entriesTab[i].animateurs;\n            for (let j = 0; j < animateurs.length; j++) {\n                nomDesAnimateurs.push(animateurs[j].nom);\n            }\n        };\n        const animateurTrouve = nomDesAnimateurs.find(\n            (nomAnimateur) => nomAnimateur === nomDuJoueurActuel\n        );\n        if (animateurTrouve) {\n            const thematiqueTrouvee = entriesTab.find((thematique) =>\n                thematique.animateurs.find((animateur) => animateur.nom === animateurTrouve)\n            );\n            if (thematiqueTrouvee) {\n                const thematique = thematiqueTrouvee.nomThematique;\n                if (thematique !== thematiqueActuel) {\n                    setThematiqueActuel(thematique);\n                }\n            }\n        }\n    };\n    console.log(thematiqueActuel);\n    recupThematiqueActuel();\n    // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n    // Il faut que je teste et que j'affiche \"les enfants\" qui jouent\n    const selectionnerOrdreJoueursEnfant = (selectionOrdreJoueurs) => {\n        setOrdreJoueursEnfant(selectionOrdreJoueurs);\n    };\n    const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n    const validerOrdre = () => {\n        selectionnerOrdreJoueursEnfant(enfantsChoisis);\n        // A partir d'ici on récupère l'ordre que les enfants ont choisis\n        setOrdreJoueursEnfant(enfantsChoisis);\n        setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n        setSelection(false);\n        setNbTourActuel(nbTourActuel + 1);\n    };\n    useEffect(() => {\n        // console.log(joueursChoisis);\n        // console.log(animateursChoisis);\n    }, [joueursChoisis])\n    // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n    // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n    return (\n        <>\n            <div>\n                <h3>{nbManches}e Manche - {nbTourActuel}e Tour - role actuel : {roleActuel}</h3>\n                {nbTourActuel === 0 && afficherSelection && (\n                    <div>\n                        <h2>l'ordre des enfants</h2>\n                        <ul>\n                            {enfantsChoisis.map((enfant, index) => (\n                                <li key={enfant.id}>\n                                    {enfant.nom}\n                                    <button onClick={() => deplacerJoueur(index, index - 1)}>▲</button>\n                                    <button onClick={() => deplacerJoueur(index, index + 1)}>▼</button>\n                                </li>\n                            ))}\n                        </ul>\n                        <button onClick={validerOrdre}>Valider l'ordre</button>\n                    </div>\n                )}\n                {!afficherSelection &&  (\n                    <div>\n                        {roleActuel === 'enfant' ?\n                            <>\n                                <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} nomThematique={thematiqueActuel} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.image} />\n                                <PanelAction animateurs={animateursTries} thematiques={data.thematique} enfantsTab={ordreJoueursEnfant}/>\n                            </>\n                            :\n                            roleActuel === 'animateur' && (\n                                <>\n                                    <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                        nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                        description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                        objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.image} nomThematique={thematiqueActuel} objectifImg={joueurActuel.objectifs.animateurs.img} enfantsTab={enfantsChoisis}/>\n                                </>\n                            )\n                        }\n                        <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                    </div>\n                )}\n                {nbManches === 11 && (\n                    <p>C'est fini c'est perdu !</p>\n                )}\n            </div>\n        </>\n    )\n}\n\n","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/data/fake-data.js",[],[],"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/FicheJoueur/FicheJoueur.jsx",["109","110","111","112","113","114","115"],[],"import { useState, useRef } from 'react';\nimport React from 'react';\nimport coeurPleinSrc from '../../assets/img/coeur_plein.svg';\nimport coeurVideSrc from '../../assets/img/coeur_vide.svg';\nimport Modal from '../Modal/Modal';\n\n\nexport default function FicheJoueur({ nbDeplacements, pouvoir, nom, nbVie, description, maudit, objectif, role, img, nomThematique, objectifImg, enfantsTab }) {\n\n\n    const [showPopInEnfants, setShowPopInEnfants] = useState(false);\n    const enfantPrevRef = useRef(null);\n\n    const displayPopIn = () => {\n        console.log('Display Pop In Animateurs');\n        setShowPopInEnfants(true);\n        console.log(showPopInEnfants);\n    }\n\n    if (maudit === true) {\n        maudit = \"oui\"\n    } else {\n        maudit = \"non\"\n    }\n\n    // gestion du nombre de vie selon nbVie du joueurActuel avec une image now it works\n\n    const genererCoeurs = (nbVies, coeur_plein, coeur_vide) => {\n        const coeursTab = [];\n        const nbViesMax = nbVies + 1; // valeur que je souhaite stocker\n        console.log(\"----- Points de vie Max -----\");\n        console.log(nbViesMax);\n        console.log(\"----------\");\n\n        // Là ca génère le nombre de vie\n        for (let i = 0; i < nbVies; i++) {\n            coeursTab.push(coeur_plein);\n        }\n\n        if (coeursTab.length < nbViesMax) {\n            coeursTab.push(coeur_vide);\n        }\n\n\n        return coeursTab;\n    };\n\n    // bouton dans ficheAnimateur \"Renvoyer un enfant au Dortoir\" \n    // Méthode pour supprimer un point de vie --> ca pas prio gérer si il en a plus console.log(joueurActuel est OUT faut l'enlever de OrdreFinal)\n\n    // const [pointDeVie, setPointDeVie] = useState();\n\n    const [message, setMessage] = useState(\"\");\n\n    // il faut pendant l'affichage de la Modal, afficher le nombre de vies qu'il reste aux personnages\n    const [messagePoint, setMessagePV] = useState(false);\n\n    const [enfantSelection, setEnfantSelection] = useState([]);\n\n    // Gérer la sélection, garder en stock et return enfantChoix\n    const choixEnfant = (enfantChoix) => {\n        const enfantPrev = enfantPrevRef.current;\n        console.log(enfantPrev);\n        if (enfantPrev !== null && enfantPrev !== enfantChoix) {\n            document.getElementById('enfantChoisis' + enfantPrev.nom).style.border = \"none\";\n        }\n\n        document.getElementById('enfantChoisis' + enfantChoix.nom).style.border = \"1px solid red\";\n        setEnfantSelection(enfantChoix);\n        enfantPrevRef.current = enfantChoix;\n\n    }\n\n    const [enfantsPunis, setEnfantsPunis] = useState([]);\n\n    const retirerPointDeVie = (joueurChoisi) => {\n        // match le nom du joueurChoisi et le nom dans le tableau enfantsTab\n        const nomJoueurChoisi = joueurChoisi.nom;\n        const indexEnfantTrouve = enfantsTab.findIndex(\n            (enfantPunie) => enfantPunie.nom === nomJoueurChoisi\n        );\n        if (indexEnfantTrouve !== -1) {\n            joueurChoisi.pv--;\n            let message = `${nomJoueurChoisi} a ${joueurChoisi.pv} points de vie !`;\n\n            // si plus de vie, envoyé au Dortoir\n            if (joueurChoisi.pv <= 0) {\n                message = `${nomJoueurChoisi} n'a plus de vie !`;\n                enfantsPunis.push(joueurChoisi);\n                enfantsTab.splice(indexEnfantTrouve, 1);\n                console.log(enfantsPunis);\n            }\n\n\n            setTimeout(() => {\n                setShowPopInEnfants(false);\n            }, 3500);\n            setMessage(message);\n        }\n    }\n\n\n    // const onClickConsole = (text, vara) => {\n    //     console.log(text);\n    //     console.log(vara);\n    // }\n\n    return (\n        <div id='ficheJoueur'>\n            {showPopInEnfants && (\n                <Modal setShowModal={setShowPopInEnfants}>\n                    {/* il faut que je réupere tous les enfantsChoisis */}\n                    {enfantsTab && (\n                        <>\n                            <p className=\"title\">Sélectionner l'enfant que l'animateur punie</p>\n                            {console.log(enfantsTab)}\n                            {enfantsTab.map((enfant, i) =>\n                                <div key={i} id={'enfantChoisis' + enfant.nom} onClick={() => choixEnfant(enfant)}>\n                                    <p>{enfant.nom}</p>\n                                    {genererCoeurs(nbVie, coeurPleinSrc, coeurVideSrc).map((image, index) => (\n                                        <img key={index} src={image} alt=\"coeur\" />\n                                    ))}\n                                </div>\n                            )}\n                            {enfantsPunis && (\n                                enfantsPunis.map((enfant, i) =>\n                                    <div key={i} id={'enfantChoisis' + enfant.nom}>\n                                        <p>{enfant.nom} n'est plus jouable</p>\n                                        {genererCoeurs(nbVie, coeurPleinSrc, coeurVideSrc).map((image, index) => (\n                                            <img key={index} src={image} alt=\"coeur\" />\n                                        ))}\n                                    </div>\n                                )\n                            )}\n                            <button onClick={() => retirerPointDeVie(enfantSelection)}>Valider</button>\n                        </>\n                    )}\n                </Modal>\n            )}\n            {role === 'animateur' && (\n                <div id='ficheAnimateur'>\n                    <div className='tour-wrapper'>\n                        <img src={img} alt={\"image de profil de l'animateur \" + nom} />\n                        <div className='tour-wrapper__role'>\n                            <p className='role__sous-titre'>{role}</p>\n                            <p className='role__nom'>{nom}</p>\n                        </div>\n                    </div>\n                    <div className=\"actions\">\n                        <div className=\"actions__deplacement\">\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={img} alt={\"image de \" + nom} />\n                                </div>\n                                <p><strong>{nom}</strong> peut avancer de <strong>{nbDeplacements}</strong></p>\n                            </div>\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={objectifImg} alt={\"image de jeton \" + nomThematique} />\n                                </div>\n                                <p><strong>{nom}</strong> ramasse tous les jetons rouges <strong>\"{nomThematique}\"</strong> de la pièce.</p>\n                            </div>\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={require(\"../../assets/img/dortoir.png\")} alt=\"image du Dortoir\" />\n                                </div>\n                                <p>Si un enfant est présent dans la pièce où arrive {nom}. Il est renvoyé au Dortoir</p>\n                            </div>\n                        </div>\n                    </div>\n                    <button className=\"actions__button\" onClick={displayPopIn}>Renvoyez un enfant dans le dortoir</button>\n                </div>\n            )}\n            {role === 'enfant' && (\n                <div id='ficheEnfant'>\n                    <div className='tour-wrapper'>\n                        <div className=\"tour-wrapper__sub\">\n                            <img src={img} alt={\"image de profil de \" + nom} />\n                            <div className='tour-wrapper__role'>\n                                <p className='role__sous-titre'>{role}</p>\n                                <p className='role__nom'>{nom}</p>\n                            </div>\n                        </div>\n                        <div className=\"tour-wrapper__pv\">\n                            {genererCoeurs(nbVie, coeurPleinSrc, coeurVideSrc).map((image, index) => (\n                                <img key={index} src={image} alt=\"coeur\" />\n                            ))}\n                        </div>\n                    </div>\n                    <div className=\"actions\">\n                        <div className=\"actions__deplacement\">\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={require(\"../../assets/img/deplacement.png\")} alt={\"image de \" + nom} />\n                                </div>\n                                <p><strong>{nom}</strong> peut avancer de <strong>{nbDeplacements}</strong></p>\n                            </div>\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={require(\"../../assets/img/deFiche.png\")} alt=\"image pictogramme du Dortoir\" />\n                                </div>\n                                <p>Le joueur doit effectuer 2 actions présentes dans la réserve de dés.</p>\n                            </div>\n                            <div className=\"actions__row\">\n                                <div className=\"row__image\">\n                                    <img src={require(\"../../assets/img/dortoir.png\")} alt=\"image du Dortoir\" />\n                                </div>\n                                <p>Si un enfant est présent dans la pièce où arrive {nom}. Il est renvoyé au Dortoir</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/PanelAction/PanelAction.jsx",["116","117","118","119","120","121","122"],[],"import { useState } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport stalkyProfil from '../../assets/img/perso-stalky.svg';\nimport choisiIcon from '../../assets/img/persoValide.svg';\n\nexport default function PanelAction({animateurs,thematiques}) {\n\n    const [showPopInQuestion,setShowPopInQuestion] = useState(false);\n    const [animateursQuestionsInfos,setAnimateursQuestionsInfos] = useState([]);\n    const [questionQuizz,setQuestionQuizz] = useState({});\n    const [bonneReponse, setBonneReponse] = useState(2); // bon (1) mauvais (0) \n    const [displayQuestionView, setDisplayQuestionView] = useState(false); \n    let tabReponseJoueurs = [];\n\n    const displayPopIn = () => {\n        setShowPopInQuestion(true);\n        //console.log(showPopInQuestion);\n    }\n\n    const reinit = () => {\n        setDisplayQuestionView(false);\n        setAnimateursQuestionsInfos([]);\n        setQuestionQuizz({});\n        setBonneReponse(2);\n    }\n\n    const displayQuestion = (nomThematique) => {\n\n        setAnimateursQuestionsInfos(thematiques[nomThematique]);\n        let randomNumber = Math.floor(Math.random() * (thematiques[nomThematique].questions.length - 0) + 0)\n        setQuestionQuizz(thematiques[nomThematique].questions[randomNumber]);\n\n        let containersAnimateurs = document.getElementsByClassName('animateurInfos');\n        // retrait de l'icon checked partout\n        let containersprofileOpacity = document.getElementsByClassName('profileOpacity');\n        let containersprofileChecked = document.getElementsByClassName('profileChecked');\n        for (let k = 0; k<containersprofileOpacity.length; k++) {\n            containersprofileOpacity[k].classList.remove('ajoutBackgroundChoisi');\n            containersprofileChecked[k].style.display = 'none';\n        }\n\n        for (let i=0; i<containersAnimateurs.length; i++) {\n            //console.log(containersAnimateurs[i]);\n            containersAnimateurs[i].style.background = \"white\";\n            containersAnimateurs[i].style.color = \"black\";\n\n            //console.log(containersAnimateurs[i].id);\n            if (containersAnimateurs[i].id == \"animateur_\"+nomThematique) {\n                document.getElementById('profileOpacity_'+nomThematique).classList.add('ajoutBackgroundChoisi');\n                document.getElementById('profileChecked_'+nomThematique).style.display = 'block';\n            }\n        }\n    }\n\n    const ajoutReponse = (index) => {\n        if (!tabReponseJoueurs.includes(index)) {\n            tabReponseJoueurs.push(index);\n            let reponseContainer = document.getElementById('reponse'+index);\n            reponseContainer.style.background = '#e375a3';\n            reponseContainer.style.color = 'white';\n        }\n        else {\n            console.log('already added');\n        }\n    }\n\n    const verifieReponse = () => {\n \n        //console.log(tabReponseJoueurs);\n        //console.log(questionQuizz);\n        if (!Array.isArray(questionQuizz.bonne_reponse)) { // unique bonne réponse\n            if (tabReponseJoueurs.length == 1 &&  questionQuizz.bonne_reponse == tabReponseJoueurs[0]) { // cocher qu\"une case et c'est la bonne réponse\n                setBonneReponse(1);\n                console.log('gagné');\n            }\n            else {\n                setBonneReponse(0);\n                console.log('non gagné');\n            }\n        }\n        else {\n                console.log('mchoice');\n                tabReponseJoueurs = tabReponseJoueurs.sort();\n                console.log(tabReponseJoueurs);\n                console.log(questionQuizz.bonne_reponse);\n\n                if (tabReponseJoueurs.sort().toString() == questionQuizz.bonne_reponse.sort().toString()) {\n                    console.log('gagné multiple choices');\n                    setBonneReponse(1);\n                }\n                else {\n                    setBonneReponse(0);\n                    console.log('non multiple choices');\n                }\n        }\n\n        document.getElementById('validBtn').style.display = 'none';\n        // TODO boucler et n'affichez que les réponses choisies par le joueur\n        let reponses = document.getElementsByClassName('reponses');\n\n        for (let i=0; i<reponses.length; i++) {\n            reponses[i].style.background = '#e06f4d';\n            reponses[i].style.color = 'white';\n        }\n\n        if (Array.isArray(questionQuizz.bonne_reponse)) {\n            for (let i=0; i<questionQuizz.bonne_reponse.length; i++) {\n                console.log(questionQuizz.bonne_reponse[i]);\n                document.getElementById('reponse'+questionQuizz.bonne_reponse[i]).style.background = '#4fab78';\n            }\n        }\n        else {\n            console.log(document.getElementById('reponse'+questionQuizz.bonne_reponse[0]));\n            console.log(questionQuizz.bonne_reponse);\n            document.getElementById('reponse'+questionQuizz.bonne_reponse).style.background = '#4fab78';\n            document.getElementById('reponse'+questionQuizz.bonne_reponse).style.color = 'white';\n        }\n    \n\n        // TODO CSS\n    }\n\n    return (\n        <div id=\"panelActions\">\n            <div>\n                {/* <div>Peut relancer un dé par tour</div> */}\n                <button onClick={() => displayPopIn()}>Question Quizz</button>\n                {/* <div>Acces après avoir débloquer la cave</div> */}\n            </div>\n\n            {showPopInQuestion &&\n                <Modal setShowModal={setShowPopInQuestion}>\n\n                    {!displayQuestionView && (\n                        <div id=\"choixAnimateur\">\n                            <p className=\"subTitle\">CHOISSISEZ L'ANIMATEUR QUE VOUS SOUHAITEZ GUÉRIR</p>\n                            <p className=\"remarque\">À noter que la question quizz n’est disponible que lors de la récupération d‘un point </p>\n\n                            <div className=\"listAnimateurChoisis\">\n                                {animateurs.map(animateur =>\n                                        <div className='animateurInfos' id= {'animateur_'+animateur.nomThematique} onClick={() => displayQuestion(animateur.nomThematique)} >\n                                            <div className='profil'>\n                                                <div className='profil_containerImg'>\n                                                    <div className='profileOpacity' id={'profileOpacity_'+animateur.nomThematique}></div>\n                                                    <div className='profileChecked' id={'profileChecked_'+animateur.nomThematique}><img src={choisiIcon}/></div>\n                                                    <img className='profil_photo' src={stalkyProfil} />\n                                                </div>\n                                            </div>\n                                            <p className='persoNom'>{animateur.nom}</p>\n                                        </div>\n                                )}\n                            </div>\n\n                            <button className=\"buttonConfirmer\"  onClick={() => questionQuizz.choix !== undefined ? setDisplayQuestionView(true) : console.log('nothing to display')}>Super !</button>\n                        </div>\n                   )}\n\n                    {displayQuestionView && (\n                        <div id=\"questionQuizz\">\n                            <p className=\"subTitle\">QUESTION QUIZZ</p>\n                            <p className=\"nomThematique\">{animateursQuestionsInfos.nomThematique}</p>\n                            \n                            <div>\n                                <p className=\"questionTitre\">{questionQuizz.titre}</p>\n                                {questionQuizz.choix.multiples ?\n                                    (<div className=\"listReponses\">{questionQuizz.choix.multiples.map((choix,i) => <p  className=\"reponses\" id={\"reponse\"+i} onClick={() => ajoutReponse(i)}>{choix}</p>)}</div>)\n                                    :\n                                    (<div className=\"listReponses\">{questionQuizz.choix.map((choix,i) => <p className=\"reponses\"  id={\"reponse\"+i} onClick={() => ajoutReponse(i)}>{choix}</p>)}</div>)\n\n                                }\n                                <button className=\"buttonConfirmer\" id=\"validBtn\" onClick={() => verifieReponse()}>Valider</button>\n                            </div>\n\n                            {/* BONNE REPONSE */}\n                            {bonneReponse === 1 && (\n                                <div className=\"resultsContainer\" id=\"resultsContainer_bon\">\n                                    <p className=\"result\">Bravo ! Tu peux récupérer un point</p>\n                                    <p className=\"infos\">Pour plus d’informations n’hésite pas à aller dans la galerie pour trouver des ressources</p>\n                                    {/*<!--<button className=\"buttonConfirmer\" >Fermer</button>-->*/}\n                                </div>\n                            )}\n\n                            {/* MAUVAISE REPONSE */}\n                            {bonneReponse === 0 && (\n                                <div className=\"resultsContainer\" id=\"resultsContainer_mauvais\">\n                                    <p className=\"result\">Mince, pas de point pour cette fois</p>\n                                    <p className=\"infos\">Pour plus d’informations n’hésite pas à aller dans la galerie pour trouver des ressources</p>\n                                    {/*<!--<button className=\"buttonConfirmer\" >Fermer</button>-->*/}\n                                </div>\n                            )}\n                        \n                    </div>\n                    )\n                    }\n                </Modal>\n            }\n        </div>\n    )\n}","/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Modal/Modal.jsx",["123"],[],"import { useRef, useEffect } from 'react';\n\nexport default function Modal({ setShowModal, children}) {\n    const modal = useRef();\n    const overlay = useRef();\n\n    const hideModal = () => {\n        overlay.current.classList.add(\"modal-overlay--hidden\");\n        modal.current.classList.add(\"modal--hidden\");\n        setTimeout(() => {\n            setShowModal(false)\n        }, 550);\n    }\n\n\n\n    return (\n        <>\n            <div ref={overlay} onClick={hideModal} className=\"modal-overlay\"></div>\n            <div ref={modal} className=\"modal\">\n                <div onClick={hideModal} className=\"close-icon\">\n                    x\n                </div>\n                {children}\n            </div>\n        </>\n    )\n}",{"ruleId":"124","severity":1,"message":"125","line":2,"column":11,"nodeType":"126","messageId":"127","endLine":2,"endColumn":17},{"ruleId":"124","severity":1,"message":"128","line":2,"column":20,"nodeType":"126","messageId":"127","endLine":2,"endColumn":26},{"ruleId":"124","severity":1,"message":"128","line":2,"column":20,"nodeType":"126","messageId":"127","endLine":2,"endColumn":26},{"ruleId":"124","severity":1,"message":"129","line":12,"column":29,"nodeType":"126","messageId":"127","endLine":12,"endColumn":49},{"ruleId":"124","severity":1,"message":"130","line":13,"column":32,"nodeType":"126","messageId":"127","endLine":13,"endColumn":55},{"ruleId":"124","severity":1,"message":"131","line":16,"column":11,"nodeType":"126","messageId":"127","endLine":16,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":117,"column":119,"nodeType":"134","endLine":117,"endColumn":142},{"ruleId":"132","severity":1,"message":"133","line":118,"column":53,"nodeType":"134","endLine":118,"endColumn":104},{"ruleId":"132","severity":1,"message":"133","line":141,"column":126,"nodeType":"134","endLine":141,"endColumn":149},{"ruleId":"132","severity":1,"message":"133","line":142,"column":57,"nodeType":"134","endLine":142,"endColumn":108},{"ruleId":"132","severity":1,"message":"133","line":160,"column":25,"nodeType":"134","endLine":160,"endColumn":41},{"ruleId":"132","severity":1,"message":"133","line":12,"column":17,"nodeType":"134","endLine":12,"endColumn":35},{"ruleId":"132","severity":1,"message":"133","line":12,"column":13,"nodeType":"134","endLine":12,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":14,"column":17,"nodeType":"134","endLine":14,"endColumn":54},{"ruleId":"135","severity":1,"message":"136","line":15,"column":17,"nodeType":"134","endLine":15,"endColumn":60},{"ruleId":"135","severity":1,"message":"136","line":16,"column":17,"nodeType":"134","endLine":16,"endColumn":60},{"ruleId":"135","severity":1,"message":"136","line":17,"column":17,"nodeType":"134","endLine":17,"endColumn":60},{"ruleId":"124","severity":1,"message":"137","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":21},{"ruleId":"124","severity":1,"message":"138","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"140","line":20,"column":8,"nodeType":"141","endLine":20,"endColumn":24,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"143","line":22,"column":9,"nodeType":"126","messageId":"127","endLine":22,"endColumn":21},{"ruleId":"124","severity":1,"message":"144","line":44,"column":21,"nodeType":"126","messageId":"127","endLine":44,"endColumn":31},{"ruleId":"124","severity":1,"message":"145","line":53,"column":12,"nodeType":"126","messageId":"127","endLine":53,"endColumn":19},{"ruleId":"124","severity":1,"message":"146","line":56,"column":12,"nodeType":"126","messageId":"127","endLine":56,"endColumn":24},{"ruleId":"124","severity":1,"message":"147","line":56,"column":26,"nodeType":"126","messageId":"127","endLine":56,"endColumn":38},{"ruleId":"124","severity":1,"message":"148","line":74,"column":26,"nodeType":"126","messageId":"127","endLine":74,"endColumn":41},{"ruleId":"149","severity":1,"message":"150","line":165,"column":37,"nodeType":"134","endLine":165,"endColumn":113},{"ruleId":"149","severity":1,"message":"150","line":200,"column":37,"nodeType":"134","endLine":200,"endColumn":125},{"ruleId":"149","severity":1,"message":"150","line":206,"column":37,"nodeType":"134","endLine":206,"endColumn":113},{"ruleId":"124","severity":1,"message":"151","line":20,"column":11,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":48,"column":44,"nodeType":"154","messageId":"155","endLine":48,"endColumn":46},{"ruleId":"152","severity":1,"message":"153","line":72,"column":42,"nodeType":"154","messageId":"155","endLine":72,"endColumn":44},{"ruleId":"152","severity":1,"message":"153","line":72,"column":79,"nodeType":"154","messageId":"155","endLine":72,"endColumn":81},{"ruleId":"152","severity":1,"message":"153","line":87,"column":57,"nodeType":"154","messageId":"155","endLine":87,"endColumn":59},{"ruleId":"132","severity":1,"message":"133","line":145,"column":132,"nodeType":"134","endLine":145,"endColumn":155},{"ruleId":"132","severity":1,"message":"133","line":146,"column":53,"nodeType":"134","endLine":146,"endColumn":104},{"ruleId":"124","severity":1,"message":"156","line":1,"column":18,"nodeType":"126","messageId":"127","endLine":1,"endColumn":27},"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'setTabJoueursChoisis' is assigned a value but never used.","'setTabAnimateursChoisis' is assigned a value but never used.","'nbjoueursTab' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Configuration' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'animateursChoisis'. Either include it or remove the dependency array.","ArrayExpression",["157"],"'numeroManche' is assigned a value but never used.","'setNbTours' is assigned a value but never used.","'message' is assigned a value but never used.","'messagePoint' is assigned a value but never used.","'setMessagePV' is assigned a value but never used.","'setEnfantsPunis' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'reinit' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.",{"desc":"158","fix":"159"},"Update the dependencies array to be: [animateursChoisis, joueursChoisis]",{"range":"160","text":"161"},[821,837],"[animateursChoisis, joueursChoisis]"]