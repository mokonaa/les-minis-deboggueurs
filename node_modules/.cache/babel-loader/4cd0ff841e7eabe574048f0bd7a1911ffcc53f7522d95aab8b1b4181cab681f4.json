{"ast":null,"code":"var _jsxFileName = \"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { data } from '../../data/fake-data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Suivi(_ref) {\n  _s();\n  let {\n    joueursChoisis,\n    animateursChoisis\n  } = _ref;\n  // param -> data passé par Maria \n\n  /**\n   * \n   * params : tableau des animateurs trié , tableau des enfants choisies\n   * \n   * Conditions d'affichage de vues \n   *  - Affichage des infos de l'animateur\n   *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n   *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n   *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n  */\n\n  // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n\n  let animateursTries = [];\n  const thematiques = animateursChoisis;\n  // Il faut récupérer chaque animateur de chaque thématique\n\n  Object.keys(thematiques).forEach(theme => {\n    const animateurs = thematiques[theme].animateurs;\n    animateursTries.push(...animateurs);\n  });\n  //*/\n\n  // Tri des animateurs par priorité (ordre décroissant)\n  animateursTries.sort((a, b) => b.priorite - a.priorite);\n  // console.log('----- Animateurs Triés en ordre décroissant -----');\n  // console.log(animateursTries);\n  // console.log('-------------------------------------------------');\n\n  // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n\n  //\n  //const enfants = data.enfants;\n  const enfants = joueursChoisis;\n\n  // fausse data en attendant de recevoir\n  const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n  // Le nb de joueurs choisis\n  const nbDeJoueurs = enfants.length;\n  const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n  // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n  const [nbManches, setNbManches] = useState(1);\n  const nbManchesMax = 10;\n  const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n  const [nbTourActuel, setNbTourActuel] = useState(1);\n\n  // Faire une phase \"choisir l'ordre des enfants\" qu'à partir du 2e tour de la 1e manche\n  const phaseOrdre = () => {\n    if (nbTourActuel === 2 && nbManches === 1) {\n      selectionnerOrdreJoueursEnfant();\n    }\n  };\n  const deplacerJoueur = (index, nouvelIndex) => {\n    const joueursEnfantCopies = [...enfantsChoisis];\n    const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n    joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n    setEnfantsChoisis(joueursEnfantCopies);\n  };\n  const [ordreFinal, setOrdreFinal] = useState([]);\n\n  // Il faut générer un nouvel ordre pour la suite du jeu\n  const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n    const nouvelOrdre = [];\n    const nbJoueurs = ordreJoueursEnfant.length;\n    const nbAnimateurs = animateursTries.length;\n\n    // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n    const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n\n    // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n    for (let i = 0; i < nbTours; i++) {\n      const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n      const animateur = animateursTries[i % nbAnimateurs];\n      nouvelOrdre.push(animateur);\n      nouvelOrdre.push(joueurEnfant);\n    }\n    return nouvelOrdre;\n  };\n\n  // nbTours -> correspond au nombre de tours dans une manche\n  // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n  const gestionNbTours = () => {\n    // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n    setNbTourActuel(nbTourActuel + 1);\n    if (nbTourActuel % 2 === 0) {\n      setRoleActuel('animateur');\n    } else {\n      setRoleActuel('enfant');\n    }\n    // Vérifie si la manche est terminée après chaque tour\n    gestionNbManche();\n  };\n  const gestionNbManche = () => {\n    // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n    if (nbTourActuel >= nbTours) {\n      setNbManches(nbManches + 1); // Passage à la prochaine manche\n      setNbTourActuel(1);\n      setRoleActuel('animateur');\n    }\n    if (nbManches > nbManchesMax) {\n      setNbTourActuel(0);\n      setNbManches(0);\n    }\n  };\n\n  // État pour stocker l'ordre des joueurs \"enfant\"\n  const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n\n  // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n  // Il faut que je teste et que j'affiche \"les enfants\" qui jouent \n  const selectionnerOrdreJoueursEnfant = selectionOrdreJoueurs => {\n    setOrdreJoueursEnfant(selectionOrdreJoueurs);\n  };\n  const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n\n  const validerOrdre = () => {\n    selectionnerOrdreJoueursEnfant(enfantsChoisis);\n    // A partir d'ici on récupère l'ordre que les enfants ont choisis\n    setOrdreJoueursEnfant(enfantsChoisis);\n    setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n    setSelection(false);\n  };\n  const joueurActuel = nbTourActuel > 0 ? ordreFinal[nbTourActuel - 1] : [];\n  useEffect(() => {\n    console.log(joueursChoisis);\n    console.log(animateursChoisis);\n  }, [joueursChoisis]);\n\n  // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n  // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [nbManches, \"e Manche - \", nbTourActuel, \"e Tour - role actuel : \", roleActuel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), nbTourActuel === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FicheJoueur, {\n          nbDeplacements: animateursTries[0].deplacement,\n          pouvoir: animateursTries[0].pouvoir,\n          nom: animateursTries[0].nom,\n          nbVie: 5 - animateursTries[0].objectifs.enfants.points,\n          description: animateursTries[0].description,\n          maudit: animateursTries[0].maudit,\n          objectif: animateursTries[0].objectifs.animateurs.points,\n          role: roleActuel,\n          img: animateursTries[0].img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), nbTourActuel === 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nbTourActuel === 2 && nbManches === 1 && afficherSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"l'ordre des enfants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: enfantsChoisis.map((enfant, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [enfant.nom, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deplacerJoueur(index, index - 1),\n                children: \"\\u25B2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deplacerJoueur(index, index + 1),\n                children: \"\\u25BC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 45\n              }, this)]\n            }, enfant.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: validerOrdre,\n            children: \"Valider l'ordre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 29\n        }, this), !afficherSelection && nbTourActuel > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [roleActuel === 'enfant' ? /*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: joueurActuel.pouvoir,\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.pv,\n            description: joueurActuel.description,\n            maudit: \"\",\n            objectif: \"\",\n            role: roleActuel,\n            img: joueurActuel.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 37\n          }, this) : roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: \"\",\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points,\n            description: joueurActuel.description,\n            maudit: joueurActuel.maudit,\n            objectif: joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0,\n            role: roleActuel,\n            img: joueurActuel.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: gestionNbTours,\n            children: \"Passer au prochain tour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nbTourActuel >= 3 && (roleActuel === 'enfant' ? /*#__PURE__*/_jsxDEV(FicheJoueur, {\n          nbDeplacements: joueurActuel.deplacement,\n          pouvoir: joueurActuel.pouvoir,\n          nom: joueurActuel.nom,\n          nbVie: joueurActuel.pv,\n          description: joueurActuel.description,\n          maudit: \"\",\n          objectif: \"\",\n          role: roleActuel,\n          img: joueurActuel.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this) : roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(FicheJoueur, {\n          nbDeplacements: joueurActuel.deplacement,\n          pouvoir: \"\",\n          nom: joueurActuel.nom,\n          nbVie: joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points,\n          description: joueurActuel.description,\n          maudit: joueurActuel.maudit,\n          objectif: joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0,\n          role: roleActuel,\n          img: joueurActuel.img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: gestionNbTours,\n          children: \"Passer au prochain tour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: joueurActuel === 'animateur' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Animateur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Suivi, \"rgsp1/amJY55dC7UGsmoGtgbhsg=\");\n_c = Suivi;\nvar _c;\n$RefreshReg$(_c, \"Suivi\");","map":{"version":3,"names":["useState","useEffect","data","FicheJoueur","jsxDEV","_jsxDEV","Fragment","_Fragment","Suivi","_ref","_s","joueursChoisis","animateursChoisis","animateursTries","thematiques","Object","keys","forEach","theme","animateurs","push","sort","a","b","priorite","enfants","enfantsChoisis","setEnfantsChoisis","nbDeJoueurs","length","roleActuel","setRoleActuel","nbManches","setNbManches","nbManchesMax","nbTours","setNbTours","nbTourActuel","setNbTourActuel","phaseOrdre","selectionnerOrdreJoueursEnfant","deplacerJoueur","index","nouvelIndex","joueursEnfantCopies","joueurDeplace","splice","ordreFinal","setOrdreFinal","genererOrdreJoueurs","ordreJoueursEnfant","nouvelOrdre","nbJoueurs","nbAnimateurs","Math","max","i","joueurEnfant","animateur","gestionNbTours","gestionNbManche","setOrdreJoueursEnfant","selectionOrdreJoueurs","afficherSelection","setSelection","validerOrdre","joueurActuel","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","nbDeplacements","deplacement","pouvoir","nom","nbVie","objectifs","points","description","maudit","objectif","role","img","map","enfant","onClick","id","pv","_c","$RefreshReg$"],"sources":["/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { data } from '../../data/fake-data'\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\n\nexport default function Suivi ({ joueursChoisis,animateursChoisis }) { // param -> data passé par Maria \n\n    /**\n     * \n     * params : tableau des animateurs trié , tableau des enfants choisies\n     * \n     * Conditions d'affichage de vues \n     *  - Affichage des infos de l'animateur\n     *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n     *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n     *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n    */\n\n    // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n\n    let animateursTries = [];\n    const thematiques = animateursChoisis;\n    // Il faut récupérer chaque animateur de chaque thématique\n    \n    Object.keys(thematiques).forEach((theme) => {\n        const animateurs = thematiques[theme].animateurs;\n        animateursTries.push(...animateurs);\n    });\n    //*/\n\n    // Tri des animateurs par priorité (ordre décroissant)\n    animateursTries.sort((a, b) => b.priorite - a.priorite);\n    // console.log('----- Animateurs Triés en ordre décroissant -----');\n    // console.log(animateursTries);\n    // console.log('-------------------------------------------------');\n\n    // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n\n    //\n    //const enfants = data.enfants;\n    const enfants = joueursChoisis;\n\n    // fausse data en attendant de recevoir\n    const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n    // Le nb de joueurs choisis\n    const nbDeJoueurs = enfants.length;\n\n    const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n    // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n    const [nbManches, setNbManches] = useState(1);\n    const nbManchesMax = 10;\n    const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n    const [nbTourActuel, setNbTourActuel] = useState(1);\n\n    // Faire une phase \"choisir l'ordre des enfants\" qu'à partir du 2e tour de la 1e manche\n    const phaseOrdre = () => {\n        if (nbTourActuel === 2 && nbManches === 1) {\n            selectionnerOrdreJoueursEnfant();\n        }\n    };\n\n    const deplacerJoueur = (index, nouvelIndex) => {\n        const joueursEnfantCopies = [...enfantsChoisis];\n        const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n        joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n        setEnfantsChoisis(joueursEnfantCopies);\n    };\n\n    const [ordreFinal, setOrdreFinal] = useState([]);\n\n    // Il faut générer un nouvel ordre pour la suite du jeu\n    const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n        const nouvelOrdre = [];\n\n        const nbJoueurs = ordreJoueursEnfant.length;\n        const nbAnimateurs = animateursTries.length;\n\n        // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n        const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n\n        // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n        for (let i = 0; i < nbTours; i++) {\n            const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n            const animateur = animateursTries[i % nbAnimateurs];\n            nouvelOrdre.push(animateur);\n            nouvelOrdre.push(joueurEnfant);\n        }\n        return nouvelOrdre;\n    };\n\n    // nbTours -> correspond au nombre de tours dans une manche\n    // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n    const gestionNbTours = () => {\n        // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n        setNbTourActuel(nbTourActuel + 1);\n        if (nbTourActuel % 2 === 0) {\n            setRoleActuel('animateur');\n\n        } else {\n            setRoleActuel('enfant');\n        }\n        // Vérifie si la manche est terminée après chaque tour\n        gestionNbManche();\n    };\n\n    const gestionNbManche = () => {\n        // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n        if (nbTourActuel >= nbTours) {\n            setNbManches(nbManches + 1); // Passage à la prochaine manche\n            setNbTourActuel(1);\n            setRoleActuel('animateur');\n        }\n        if (nbManches > nbManchesMax) {\n            setNbTourActuel(0);\n            setNbManches(0);\n        }\n    };\n\n\n    // État pour stocker l'ordre des joueurs \"enfant\"\n    const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n\n    // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n    // Il faut que je teste et que j'affiche \"les enfants\" qui jouent \n    const selectionnerOrdreJoueursEnfant = (selectionOrdreJoueurs) => {\n        setOrdreJoueursEnfant(selectionOrdreJoueurs);\n    };\n    const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n\n    const validerOrdre = () => {\n        selectionnerOrdreJoueursEnfant(enfantsChoisis);\n        // A partir d'ici on récupère l'ordre que les enfants ont choisis\n        setOrdreJoueursEnfant(enfantsChoisis);\n        setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n        setSelection(false);\n    };\n    const joueurActuel = nbTourActuel > 0 ? ordreFinal[nbTourActuel - 1] : [];\n\n\n    useEffect(() => {\n        console.log(joueursChoisis);\n        console.log(animateursChoisis);\n    }, [joueursChoisis])\n\n    // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n    // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n    return (\n        <>\n            <div>\n                <h3>{nbManches}e Manche - {nbTourActuel}e Tour - role actuel : {roleActuel}</h3>\n                {nbTourActuel === 1 &&\n                    <div>\n                        <FicheJoueur nbDeplacements={animateursTries[0].deplacement} pouvoir={animateursTries[0].pouvoir} nom={animateursTries[0].nom} nbVie={5 - animateursTries[0].objectifs.enfants.points} description={animateursTries[0].description} maudit={animateursTries[0].maudit} objectif={animateursTries[0].objectifs.animateurs.points} role={roleActuel} img={animateursTries[0].img} />\n                    </div>\n                }\n                {nbTourActuel === 2 ?\n                    <div>\n                        {nbTourActuel === 2 && nbManches === 1 && afficherSelection && (\n                            <div>\n                                <h2>l'ordre des enfants</h2>\n                                <ul>\n                                    {enfantsChoisis.map((enfant, index) => (\n                                        <li key={enfant.id}>\n                                            {enfant.nom}\n                                            <button onClick={() => deplacerJoueur(index, index - 1)}>▲</button>\n                                            <button onClick={() => deplacerJoueur(index, index + 1)}>▼</button>\n                                        </li>\n                                    ))}\n                                </ul>\n                                <button onClick={validerOrdre}>Valider l'ordre</button>\n                            </div>\n                        )}\n\n                        {!afficherSelection && nbTourActuel > 0 && (\n                            <div>\n                                {roleActuel === 'enfant' ?\n                                    <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.img} />\n                                    :\n                                    roleActuel === 'animateur' && (\n                                        <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                            nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                            description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                            objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.img} />\n                                    )\n                                }\n                                <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                            </div>\n                        )}\n                    </div>\n                    :\n                    <div>\n                        {nbTourActuel >= 3 && (\n                            roleActuel === 'enfant' ?\n                            <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.img} />\n                            :\n                            roleActuel === 'animateur' && (\n                                <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                    nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                    description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                    objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.img} />\n                            )\n                        )}\n                        <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                    </div>\n                }\n\n\n                <div>\n                    {/* Affichage du tour de l'animateur */}\n                    {joueurActuel === 'animateur' && (\n                        <div>\n                            Animateur\n                        </div>\n                    )}\n\n\n                </div>\n            </div>\n\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}