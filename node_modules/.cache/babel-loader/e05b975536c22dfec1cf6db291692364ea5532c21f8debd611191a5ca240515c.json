{"ast":null,"code":"var _jsxFileName = \"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { data } from '../../data/data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport PanelAction from '../PanelAction/PanelAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Suivi(_ref) {\n  _s();\n  let {\n    joueursChoisis,\n    animateursChoisis\n  } = _ref;\n  // param -> data passé par Maria \n\n  /**\n   * \n   * params : tableau des animateurs trié , tableau des enfants choisies\n   * \n   * Conditions d'affichage de vues \n   *  - Affichage des infos de l'animateur\n   *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n   *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n   *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n  */\n\n  // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n\n  //let animateursTries = [];\n  //const thematiques = data.thematique;\n  let animateursTries = animateursChoisis;\n  // Il faut récupérer chaque animateur de chaque thématique\n\n  /*\n  Object.keys(thematiques).forEach((theme) => {\n      const animateurs = thematiques[theme].animateurs;\n      animateursTries.push(...animateurs);\n  });\n  //*/\n\n  // Tri des animateurs par priorité (ordre décroissant)\n  animateursTries.sort((a, b) => b.priorite - a.priorite);\n  console.log(animateursTries);\n\n  // console.log('----- Animateurs Triés en ordre décroissant -----');\n  // console.log(animateursTries);\n  // console.log('-------------------------------------------------');\n\n  // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n\n  //\n  //const enfants = data.enfants;\n  const enfants = joueursChoisis;\n\n  // fausse data en attendant de recevoir\n  const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n  // Le nb de joueurs choisis\n  const nbDeJoueurs = enfants.length;\n  const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n  // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n  const [nbManches, setNbManches] = useState(1);\n  const nbManchesMax = 10;\n  const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n  const [nbTourActuel, setNbTourActuel] = useState(1);\n\n  // Faire une phase \"choisir l'ordre des enfants\" qu'à partir du 2e tour de la 1e manche\n  const phaseOrdre = () => {\n    if (nbTourActuel === 2 && nbManches === 1) {\n      selectionnerOrdreJoueursEnfant();\n    }\n  };\n  const deplacerJoueur = (index, nouvelIndex) => {\n    const joueursEnfantCopies = [...enfantsChoisis];\n    const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n    joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n    setEnfantsChoisis(joueursEnfantCopies);\n  };\n  const [ordreFinal, setOrdreFinal] = useState([]);\n\n  // Il faut générer un nouvel ordre pour la suite du jeu\n  const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n    const nouvelOrdre = [];\n    const nbJoueurs = ordreJoueursEnfant.length;\n    const nbAnimateurs = animateursTries.length;\n\n    // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n    const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n\n    // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n    for (let i = 0; i < nbTours; i++) {\n      const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n      const animateur = animateursTries[i % nbAnimateurs];\n      nouvelOrdre.push(animateur);\n      nouvelOrdre.push(joueurEnfant);\n    }\n    return nouvelOrdre;\n  };\n\n  // nbTours -> correspond au nombre de tours dans une manche\n  // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n  const gestionNbTours = () => {\n    // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n    setNbTourActuel(nbTourActuel + 1);\n    if (nbTourActuel % 2 === 0) {\n      setRoleActuel('animateur');\n    } else {\n      setRoleActuel('enfant');\n    }\n    // Vérifie si la manche est terminée après chaque tour\n    gestionNbManche();\n  };\n  const gestionNbManche = () => {\n    // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n    if (nbTourActuel >= nbTours) {\n      setNbManches(nbManches + 1); // Passage à la prochaine manche\n      setNbTourActuel(1);\n      setRoleActuel('animateur');\n    }\n    if (nbManches > nbManchesMax) {\n      setNbTourActuel(0);\n      setNbManches(0);\n    }\n  };\n\n  // État pour stocker l'ordre des joueurs \"enfant\"\n  const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n\n  // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n  // Il faut que je teste et que j'affiche \"les enfants\" qui jouent \n  const selectionnerOrdreJoueursEnfant = selectionOrdreJoueurs => {\n    setOrdreJoueursEnfant(selectionOrdreJoueurs);\n  };\n  const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n\n  const validerOrdre = () => {\n    selectionnerOrdreJoueursEnfant(enfantsChoisis);\n    // A partir d'ici on récupère l'ordre que les enfants ont choisis\n    setOrdreJoueursEnfant(enfantsChoisis);\n    setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n    setSelection(false);\n  };\n  const joueurActuel = nbTourActuel > 0 ? ordreFinal[nbTourActuel - 1] : [];\n  useEffect(() => {\n    console.log(joueursChoisis);\n    console.log(animateursChoisis);\n  }, [joueursChoisis]);\n\n  // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n  // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [nbManches, \"e Manche - \", nbTourActuel, \"e Tour - role actuel : \", roleActuel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), nbTourActuel === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(FicheJoueur, {\n          nbDeplacements: animateursTries[0].deplacement,\n          pouvoir: animateursTries[0].pouvoir,\n          nom: animateursTries[0].nom,\n          nbVie: 5 - animateursTries[0].objectifs.enfants.points,\n          description: animateursTries[0].description,\n          maudit: animateursTries[0].maudit,\n          objectif: animateursTries[0].objectifs.animateurs.points,\n          role: roleActuel,\n          img: animateursTries[0].img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(PanelAction, {\n          animateurs: animateursTries,\n          thematiques: data.thematique\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this), nbTourActuel === 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nbTourActuel === 2 && nbManches === 1 && afficherSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"l'ordre des enfants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: enfantsChoisis.map((enfant, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [enfant.nom, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deplacerJoueur(index, index - 1),\n                children: \"\\u25B2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deplacerJoueur(index, index + 1),\n                children: \"\\u25BC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 45\n              }, this)]\n            }, enfant.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: validerOrdre,\n            children: \"Valider l'ordre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this), !afficherSelection && nbTourActuel > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [roleActuel === 'enfant' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FicheJoueur, {\n              nbDeplacements: joueurActuel.deplacement,\n              pouvoir: joueurActuel.pouvoir,\n              nom: joueurActuel.nom,\n              nbVie: joueurActuel.pv,\n              description: joueurActuel.description,\n              maudit: \"\",\n              objectif: \"\",\n              role: roleActuel,\n              img: joueurActuel.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(PanelAction, {\n              animateurs: animateursTries,\n              thematiques: data.thematique\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true) : roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(FicheJoueur, {\n              nbDeplacements: joueurActuel.deplacement,\n              pouvoir: \"\",\n              nom: joueurActuel.nom,\n              nbVie: joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points,\n              description: joueurActuel.description,\n              maudit: joueurActuel.maudit,\n              objectif: joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0,\n              role: roleActuel,\n              img: joueurActuel.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 45\n            }, this)\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: gestionNbTours,\n            children: \"Passer au prochain tour\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [nbTourActuel >= 3 && (roleActuel === 'enfant' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: joueurActuel.pouvoir,\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.pv,\n            description: joueurActuel.description,\n            maudit: \"\",\n            objectif: \"\",\n            role: roleActuel,\n            img: joueurActuel.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(PanelAction, {\n            animateurs: animateursTries,\n            thematiques: data.thematique\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: \"\",\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points,\n            description: joueurActuel.description,\n            maudit: joueurActuel.maudit,\n            objectif: joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0,\n            role: roleActuel,\n            img: joueurActuel.img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 37\n          }, this)\n        }, void 0, false)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: gestionNbTours,\n          children: \"Passer au prochain tour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: joueurActuel === 'animateur' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Animateur\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Suivi, \"rgsp1/amJY55dC7UGsmoGtgbhsg=\");\n_c = Suivi;\nvar _c;\n$RefreshReg$(_c, \"Suivi\");","map":{"version":3,"names":["useState","useEffect","data","FicheJoueur","PanelAction","jsxDEV","_jsxDEV","Fragment","_Fragment","Suivi","_ref","_s","joueursChoisis","animateursChoisis","animateursTries","sort","a","b","priorite","console","log","enfants","enfantsChoisis","setEnfantsChoisis","nbDeJoueurs","length","roleActuel","setRoleActuel","nbManches","setNbManches","nbManchesMax","nbTours","setNbTours","nbTourActuel","setNbTourActuel","phaseOrdre","selectionnerOrdreJoueursEnfant","deplacerJoueur","index","nouvelIndex","joueursEnfantCopies","joueurDeplace","splice","ordreFinal","setOrdreFinal","genererOrdreJoueurs","ordreJoueursEnfant","nouvelOrdre","nbJoueurs","nbAnimateurs","Math","max","i","joueurEnfant","animateur","push","gestionNbTours","gestionNbManche","setOrdreJoueursEnfant","selectionOrdreJoueurs","afficherSelection","setSelection","validerOrdre","joueurActuel","children","fileName","_jsxFileName","lineNumber","columnNumber","nbDeplacements","deplacement","pouvoir","nom","nbVie","objectifs","points","description","maudit","objectif","animateurs","role","img","thematiques","thematique","map","enfant","onClick","id","pv","_c","$RefreshReg$"],"sources":["/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { data } from '../../data/data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport PanelAction from '../PanelAction/PanelAction';\n\n\nexport default function Suivi ({ joueursChoisis,animateursChoisis }) { // param -> data passé par Maria \n\n    /**\n     * \n     * params : tableau des animateurs trié , tableau des enfants choisies\n     * \n     * Conditions d'affichage de vues \n     *  - Affichage des infos de l'animateur\n     *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n     *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n     *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n    */\n\n    // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n\n    //let animateursTries = [];\n    //const thematiques = data.thematique;\n    let animateursTries = animateursChoisis;\n    // Il faut récupérer chaque animateur de chaque thématique\n    \n    /*\n    Object.keys(thematiques).forEach((theme) => {\n        const animateurs = thematiques[theme].animateurs;\n        animateursTries.push(...animateurs);\n    });\n    //*/\n\n    // Tri des animateurs par priorité (ordre décroissant)\n    animateursTries.sort((a, b) => b.priorite - a.priorite);\n    console.log(animateursTries);\n\n    // console.log('----- Animateurs Triés en ordre décroissant -----');\n    // console.log(animateursTries);\n    // console.log('-------------------------------------------------');\n\n    // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n\n    //\n    //const enfants = data.enfants;\n    const enfants = joueursChoisis;\n\n    // fausse data en attendant de recevoir\n    const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n    // Le nb de joueurs choisis\n    const nbDeJoueurs = enfants.length;\n\n    const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n    // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n    const [nbManches, setNbManches] = useState(1);\n    const nbManchesMax = 10;\n    const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n    const [nbTourActuel, setNbTourActuel] = useState(1);\n\n    // Faire une phase \"choisir l'ordre des enfants\" qu'à partir du 2e tour de la 1e manche\n    const phaseOrdre = () => {\n        if (nbTourActuel === 2 && nbManches === 1) {\n            selectionnerOrdreJoueursEnfant();\n        }\n    };\n\n    const deplacerJoueur = (index, nouvelIndex) => {\n        const joueursEnfantCopies = [...enfantsChoisis];\n        const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n        joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n        setEnfantsChoisis(joueursEnfantCopies);\n    };\n\n    const [ordreFinal, setOrdreFinal] = useState([]);\n\n    // Il faut générer un nouvel ordre pour la suite du jeu\n    const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n        const nouvelOrdre = [];\n\n        const nbJoueurs = ordreJoueursEnfant.length;\n        const nbAnimateurs = animateursTries.length;\n\n        // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n        const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n\n        // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n        for (let i = 0; i < nbTours; i++) {\n            const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n            const animateur = animateursTries[i % nbAnimateurs];\n            nouvelOrdre.push(animateur);\n            nouvelOrdre.push(joueurEnfant);\n        }\n        return nouvelOrdre;\n    };\n\n    // nbTours -> correspond au nombre de tours dans une manche\n    // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n    const gestionNbTours = () => {\n        // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n        setNbTourActuel(nbTourActuel + 1);\n        if (nbTourActuel % 2 === 0) {\n            setRoleActuel('animateur');\n\n        } else {\n            setRoleActuel('enfant');\n        }\n        // Vérifie si la manche est terminée après chaque tour\n        gestionNbManche();\n    };\n\n    const gestionNbManche = () => {\n        // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n        if (nbTourActuel >= nbTours) {\n            setNbManches(nbManches + 1); // Passage à la prochaine manche\n            setNbTourActuel(1);\n            setRoleActuel('animateur');\n        }\n        if (nbManches > nbManchesMax) {\n            setNbTourActuel(0);\n            setNbManches(0);\n        }\n    };\n\n\n    // État pour stocker l'ordre des joueurs \"enfant\"\n    const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n\n    // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n    // Il faut que je teste et que j'affiche \"les enfants\" qui jouent \n    const selectionnerOrdreJoueursEnfant = (selectionOrdreJoueurs) => {\n        setOrdreJoueursEnfant(selectionOrdreJoueurs);\n    };\n    const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n\n    const validerOrdre = () => {\n        selectionnerOrdreJoueursEnfant(enfantsChoisis);\n        // A partir d'ici on récupère l'ordre que les enfants ont choisis\n        setOrdreJoueursEnfant(enfantsChoisis);\n        setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n        setSelection(false);\n    };\n    const joueurActuel = nbTourActuel > 0 ? ordreFinal[nbTourActuel - 1] : [];\n\n\n    useEffect(() => {\n        console.log(joueursChoisis);\n        console.log(animateursChoisis);\n    }, [joueursChoisis])\n\n    // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n    // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n    return (\n        <>\n            <div>\n                <h3>{nbManches}e Manche - {nbTourActuel}e Tour - role actuel : {roleActuel}</h3>\n                {nbTourActuel === 1 &&\n                    <div>\n                        <FicheJoueur nbDeplacements={animateursTries[0].deplacement} pouvoir={animateursTries[0].pouvoir} nom={animateursTries[0].nom} nbVie={5 - animateursTries[0].objectifs.enfants.points} description={animateursTries[0].description} maudit={animateursTries[0].maudit} objectif={animateursTries[0].objectifs.animateurs.points} role={roleActuel} img={animateursTries[0].img} />\n                        {roleActuel === 'animateur' && (\n                            <PanelAction animateurs={animateursTries} thematiques={data.thematique}/>\n                        )}\n                    </div>\n                }\n                {nbTourActuel === 2 ?\n                    <div>\n                        {nbTourActuel === 2 && nbManches === 1 && afficherSelection && (\n                            <div>\n                                <h2>l'ordre des enfants</h2>\n                                <ul>\n                                    {enfantsChoisis.map((enfant, index) => (\n                                        <li key={enfant.id}>\n                                            {enfant.nom}\n                                            <button onClick={() => deplacerJoueur(index, index - 1)}>▲</button>\n                                            <button onClick={() => deplacerJoueur(index, index + 1)}>▼</button>\n                                        </li>\n                                    ))}\n                                </ul>\n                                <button onClick={validerOrdre}>Valider l'ordre</button>\n                            </div>\n                        )}\n\n                        {!afficherSelection && nbTourActuel > 0 && (\n                            <div>\n                                {roleActuel === 'enfant' ?\n                                    <>\n                                         <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.img} />\n                                         <PanelAction animateurs={animateursTries} thematiques={data.thematique} />\n                                    </>\n                                    :\n                                    roleActuel === 'animateur' && (\n                                        <>\n                                            <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                                nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                                description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                                objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.img} />\n                                        </>\n                                    )\n                                }\n                                <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                            </div>\n                        )}\n                    </div>\n                    :\n                    <div>\n                        {nbTourActuel >= 3 && (\n                            roleActuel === 'enfant' ?\n                            <>\n                                <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.img} />\n                                <PanelAction animateurs={animateursTries} thematiques={data.thematique}/>\n                            </>\n                            :\n                            roleActuel === 'animateur' && (\n                                <>\n                                    <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                        nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                        description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                        objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.img} />\n                                </>\n                            )\n                        )}\n                        <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                    </div>\n                }\n\n\n                <div>\n                    {/* Affichage du tour de l'animateur */}\n                    {joueurActuel === 'animateur' && (\n                        <div>\n                            Animateur\n                        </div>\n                    )}\n\n\n                </div>\n            </div>\n\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}