{"ast":null,"code":"var _jsxFileName = \"/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { data } from '../../data/data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport PanelAction from '../PanelAction/PanelAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Suivi(_ref) {\n  _s();\n  let {\n    joueursChoisis,\n    animateursChoisis\n  } = _ref;\n  // param -> data passé par Maria\n  /**\n   *\n   * params : tableau des animateurs trié , tableau des enfants choisies\n   *\n   * Conditions d'affichage de vues\n   *  - Affichage des infos de l'animateur\n   *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n   *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n   *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n  */\n  // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n  //let animateursTries = [];\n  //const thematiques = data.thematique;\n  let animateursTries = animateursChoisis;\n  // Il faut récupérer chaque animateur de chaque thématique\n  /*\n  Object.keys(thematiques).forEach((theme) => {\n      const animateurs = thematiques[theme].animateurs;\n      animateursTries.push(...animateurs);\n  });\n  //*/\n  // Tri des animateurs par priorité (ordre décroissant)\n  animateursTries.sort((a, b) => b.priorite - a.priorite);\n  // console.log('----- Animateurs Triés en ordre décroissant -----');\n  // console.log(animateursTries);\n  // console.log('-------------------------------------------------');\n  // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n  //\n  //const enfants = data.enfants;\n  const enfants = joueursChoisis;\n  // fausse data en attendant de recevoir\n  const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n  // Le nb de joueurs choisis\n  const nbDeJoueurs = enfants.length;\n  const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n  // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n  const [nbManches, setNbManches] = useState(1);\n  const nbManchesMax = 10;\n  const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n  const [nbTourActuel, setNbTourActuel] = useState(0);\n  const deplacerJoueur = (index, nouvelIndex) => {\n    const joueursEnfantCopies = [...enfantsChoisis];\n    const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n    joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n    setEnfantsChoisis(joueursEnfantCopies);\n  };\n  const [ordreFinal, setOrdreFinal] = useState([]);\n  // Il faut générer un nouvel ordre pour la suite du jeu\n  const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n    const nouvelOrdre = [];\n    const nbJoueurs = ordreJoueursEnfant.length;\n    const nbAnimateurs = animateursTries.length;\n    // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n    const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n    // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n    for (let i = 0; i < nbTours; i++) {\n      const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n      const animateur = animateursTries[i % nbAnimateurs];\n      nouvelOrdre.push(animateur);\n      nouvelOrdre.push(joueurEnfant);\n    }\n    return nouvelOrdre;\n  };\n  // nbTours -> correspond au nombre de tours dans une manche\n  // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n  const gestionNbTours = () => {\n    // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n    setNbTourActuel(nbTourActuel + 1);\n    if (nbTourActuel % 2 === 0) {\n      setRoleActuel('animateur');\n    } else {\n      setRoleActuel('enfant');\n    }\n    // Vérifie si la manche est terminée après chaque tour\n    gestionNbManche();\n  };\n  const gestionNbManche = () => {\n    // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n    if (nbTourActuel >= nbTours) {\n      setNbManches(nbManches + 1); // Passage à la prochaine manche\n      setNbTourActuel(1);\n      setRoleActuel('animateur');\n    }\n    if (nbManches > nbManchesMax && enfantsChoisis.length === 0) {\n      setNbManches(11);\n    }\n  };\n  const joueurActuel = nbTourActuel > 1 ? ordreFinal[nbTourActuel - 1] : animateursChoisis[0];\n  // État pour stocker l'ordre des joueurs \"enfant\"\n  const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n  const thematiques = data.thematique;\n  const nomDuJoueurActuel = joueurActuel.nom ? joueurActuel.nom : animateursChoisis[0].nom;\n  const [thematiqueActuel, setThematiqueActuel] = useState('');\n  // Récupérer le nom de tous les animateurs et ensuite le comparer au nom du joueur actuel pour récup la bonne thématique\n  const recupThematiqueActuel = () => {\n    const entriesTab = Object.keys(thematiques).map(key => thematiques[key]);\n    const nomDesAnimateurs = [];\n    for (let i = 0; i < entriesTab.length; i++) {\n      const animateurs = entriesTab[i].animateurs;\n      for (let j = 0; j < animateurs.length; j++) {\n        nomDesAnimateurs.push(animateurs[j].nom);\n      }\n    }\n    ;\n    const animateurTrouve = nomDesAnimateurs.find(nomAnimateur => nomAnimateur === nomDuJoueurActuel);\n    if (animateurTrouve) {\n      const thematiqueTrouvee = entriesTab.find(thematique => thematique.animateurs.find(animateur => animateur.nom === animateurTrouve));\n      if (thematiqueTrouvee) {\n        const thematique = thematiqueTrouvee.nomThematique;\n        if (thematique !== thematiqueActuel) {\n          setThematiqueActuel(thematique);\n        }\n      }\n    }\n  };\n  console.log(thematiqueActuel);\n  recupThematiqueActuel();\n  // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n  // Il faut que je teste et que j'affiche \"les enfants\" qui jouent\n  const selectionnerOrdreJoueursEnfant = selectionOrdreJoueurs => {\n    setOrdreJoueursEnfant(selectionOrdreJoueurs);\n  };\n  const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n  const validerOrdre = () => {\n    selectionnerOrdreJoueursEnfant(enfantsChoisis);\n    // A partir d'ici on récupère l'ordre que les enfants ont choisis\n    setOrdreJoueursEnfant(enfantsChoisis);\n    setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n    setSelection(false);\n    setNbTourActuel(nbTourActuel + 1);\n  };\n  useEffect(() => {\n    // console.log(joueursChoisis);\n    // console.log(animateursChoisis);\n  }, [joueursChoisis]);\n  // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n  // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [nbManches, \"e Manche - \", nbTourActuel, \"e Tour - role actuel : \", roleActuel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), nbTourActuel === 0 && afficherSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"l'ordre des enfants\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: enfantsChoisis.map((enfant, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [enfant.nom, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deplacerJoueur(index, index - 1),\n              children: \"\\u25B2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deplacerJoueur(index, index + 1),\n              children: \"\\u25BC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 37\n            }, this)]\n          }, enfant.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: validerOrdre,\n          children: \"Valider l'ordre\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this), !afficherSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [roleActuel === 'enfant' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: joueurActuel.pouvoir,\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.pv,\n            description: joueurActuel.description,\n            nomThematique: thematiqueActuel,\n            maudit: \"\",\n            objectif: \"\",\n            role: roleActuel,\n            img: joueurActuel.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(PanelAction, {\n            animateurs: animateursTries,\n            thematiques: data.thematique,\n            enfantsTab: ordreJoueursEnfant\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : roleActuel === 'animateur' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(FicheJoueur, {\n            nbDeplacements: joueurActuel.deplacement,\n            pouvoir: \"\",\n            nom: joueurActuel.nom,\n            nbVie: joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points,\n            description: joueurActuel.description,\n            maudit: joueurActuel.maudit,\n            objectif: joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0,\n            role: roleActuel,\n            img: joueurActuel.image,\n            nomThematique: thematiqueActuel,\n            objectifImg: joueurActuel.objectifs.animateurs.img,\n            enfantsTab: enfantsChoisis\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 37\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: gestionNbTours,\n          children: \"Passer au prochain tour\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), nbManches === 11 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"C'est fini c'est perdu !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Suivi, \"tcfhhBs2QfoG4hvP8NbSRtK/UQ8=\");\n_c = Suivi;\nvar _c;\n$RefreshReg$(_c, \"Suivi\");","map":{"version":3,"names":["useState","useEffect","data","FicheJoueur","PanelAction","jsxDEV","_jsxDEV","Fragment","_Fragment","Suivi","_ref","_s","joueursChoisis","animateursChoisis","animateursTries","sort","a","b","priorite","enfants","enfantsChoisis","setEnfantsChoisis","nbDeJoueurs","length","roleActuel","setRoleActuel","nbManches","setNbManches","nbManchesMax","nbTours","setNbTours","nbTourActuel","setNbTourActuel","deplacerJoueur","index","nouvelIndex","joueursEnfantCopies","joueurDeplace","splice","ordreFinal","setOrdreFinal","genererOrdreJoueurs","ordreJoueursEnfant","nouvelOrdre","nbJoueurs","nbAnimateurs","Math","max","i","joueurEnfant","animateur","push","gestionNbTours","gestionNbManche","joueurActuel","setOrdreJoueursEnfant","thematiques","thematique","nomDuJoueurActuel","nom","thematiqueActuel","setThematiqueActuel","recupThematiqueActuel","entriesTab","Object","keys","map","key","nomDesAnimateurs","animateurs","j","animateurTrouve","find","nomAnimateur","thematiqueTrouvee","nomThematique","console","log","selectionnerOrdreJoueursEnfant","selectionOrdreJoueurs","afficherSelection","setSelection","validerOrdre","children","fileName","_jsxFileName","lineNumber","columnNumber","enfant","onClick","id","nbDeplacements","deplacement","pouvoir","nbVie","pv","description","maudit","objectif","role","img","image","enfantsTab","objectifs","points","objectifImg","_c","$RefreshReg$"],"sources":["/Users/guydefontgalland/PhpstormProjects/les-minis-deboggueurs/src/components/Suivi/Suivi.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { data } from '../../data/data';\nimport FicheJoueur from '../FicheJoueur/FicheJoueur';\nimport PanelAction from '../PanelAction/PanelAction';\nexport default function Suivi({ joueursChoisis, animateursChoisis }) { // param -> data passé par Maria\n    /**\n     *\n     * params : tableau des animateurs trié , tableau des enfants choisies\n     *\n     * Conditions d'affichage de vues\n     *  - Affichage des infos de l'animateur\n     *  - Affichage statique Tours joueurs  - Jet de dés + gestion de l'ordre des joueurs\n     *  - Switch entre l'affichage Joueur et affichage Animateur (prise en compte des priorités des animateurs et de l'ordre des enfants)\n     *  - Affichage statique -> Manche terminée + Btn Commencer la nouvelle manche\n    */\n    // Récupération de la data via Configuration, pour le moment création d'une fake data en triant les animateurs selon leur ordre\n    //let animateursTries = [];\n    //const thematiques = data.thematique;\n    let animateursTries = animateursChoisis;\n    // Il faut récupérer chaque animateur de chaque thématique\n    /*\n    Object.keys(thematiques).forEach((theme) => {\n        const animateurs = thematiques[theme].animateurs;\n        animateursTries.push(...animateurs);\n    });\n    //*/\n    // Tri des animateurs par priorité (ordre décroissant)\n    animateursTries.sort((a, b) => b.priorite - a.priorite);\n    // console.log('----- Animateurs Triés en ordre décroissant -----');\n    // console.log(animateursTries);\n    // console.log('-------------------------------------------------');\n    // Sélection de l'ordre des joueurs selon le nb de joueurs, il faut récupérer cb de joueurs jouent\n    //\n    //const enfants = data.enfants;\n    const enfants = joueursChoisis;\n    // fausse data en attendant de recevoir\n    const [enfantsChoisis, setEnfantsChoisis] = useState(enfants);\n    // Le nb de joueurs choisis\n    const nbDeJoueurs = enfants.length;\n    const [roleActuel, setRoleActuel] = useState('animateur'); // par défaut animateur, // /!\\ L'animateur qui a la plus grosse priorité commence toujours en premier\n    // Gestion des manches et des tours (animateur -> enfant -> animateur -> enfant etc...)\n    const [nbManches, setNbManches] = useState(1);\n    const nbManchesMax = 10;\n    const [nbTours, setNbTours] = useState(nbDeJoueurs * 2);\n    const [nbTourActuel, setNbTourActuel] = useState(0);\n    const deplacerJoueur = (index, nouvelIndex) => {\n        const joueursEnfantCopies = [...enfantsChoisis];\n        const joueurDeplace = joueursEnfantCopies.splice(index, 1)[0];\n        joueursEnfantCopies.splice(nouvelIndex, 0, joueurDeplace);\n        setEnfantsChoisis(joueursEnfantCopies);\n    };\n    const [ordreFinal, setOrdreFinal] = useState([]);\n    // Il faut générer un nouvel ordre pour la suite du jeu\n    const genererOrdreJoueurs = (ordreJoueursEnfant, animateursTries) => {\n        const nouvelOrdre = [];\n        const nbJoueurs = ordreJoueursEnfant.length;\n        const nbAnimateurs = animateursTries.length;\n        // Déterminer le nombre de tours nécessaire pour combiner tous les joueurs\n        const nbTours = Math.max(nbJoueurs, nbAnimateurs);\n        // Combinaison des joueurs \"enfant\" et des animateurs en alternance\n        for (let i = 0; i < nbTours; i++) {\n            const joueurEnfant = ordreJoueursEnfant[i % nbJoueurs]; // modulo % est utilisé pour revenir au début des tableaux lorsque l'index dépasse leur longueur\n            const animateur = animateursTries[i % nbAnimateurs];\n            nouvelOrdre.push(animateur);\n            nouvelOrdre.push(joueurEnfant);\n        }\n        return nouvelOrdre;\n    };\n    // nbTours -> correspond au nombre de tours dans une manche\n    // nbTourActuel -> c'est le tour actuel de la partie si on est au tour 1 ou tour 2\n    const gestionNbTours = () => {\n        // Calcul du nombre total de tours en fonction du nombre de joueurs (animateurs et enfants)\n        setNbTourActuel(nbTourActuel + 1);\n        if (nbTourActuel % 2 === 0) {\n            setRoleActuel('animateur');\n        } else {\n            setRoleActuel('enfant');\n        }\n        // Vérifie si la manche est terminée après chaque tour\n        gestionNbManche();\n    };\n    const gestionNbManche = () => {\n        // Une manche se termine au bout du tours calculés selon le nb de Joueurs calculés plus tôt\n        if (nbTourActuel >= nbTours) {\n            setNbManches(nbManches + 1); // Passage à la prochaine manche\n            setNbTourActuel(1);\n            setRoleActuel('animateur');\n        }\n        if (nbManches > nbManchesMax && enfantsChoisis.length === 0) {\n            setNbManches(11); \n        }\n    };\n    const joueurActuel = nbTourActuel > 1 ? ordreFinal[nbTourActuel - 1] : animateursChoisis[0];\n    // État pour stocker l'ordre des joueurs \"enfant\"\n    const [ordreJoueursEnfant, setOrdreJoueursEnfant] = useState([]);\n    const thematiques = data.thematique;\n    const nomDuJoueurActuel = joueurActuel.nom ? joueurActuel.nom : animateursChoisis[0].nom;\n    const [thematiqueActuel, setThematiqueActuel] = useState('');\n    // Récupérer le nom de tous les animateurs et ensuite le comparer au nom du joueur actuel pour récup la bonne thématique\n    const recupThematiqueActuel = () => {\n        const entriesTab = Object.keys(thematiques).map((key) => thematiques[key]);\n        const nomDesAnimateurs = [];\n        for (let i = 0; i < entriesTab.length; i++) {\n            const animateurs = entriesTab[i].animateurs;\n            for (let j = 0; j < animateurs.length; j++) {\n                nomDesAnimateurs.push(animateurs[j].nom);\n            }\n        };\n        const animateurTrouve = nomDesAnimateurs.find(\n            (nomAnimateur) => nomAnimateur === nomDuJoueurActuel\n        );\n        if (animateurTrouve) {\n            const thematiqueTrouvee = entriesTab.find((thematique) =>\n                thematique.animateurs.find((animateur) => animateur.nom === animateurTrouve)\n            );\n            if (thematiqueTrouvee) {\n                const thematique = thematiqueTrouvee.nomThematique;\n                if (thematique !== thematiqueActuel) {\n                    setThematiqueActuel(thematique);\n                }\n            }\n        }\n    };\n    console.log(thematiqueActuel);\n    recupThematiqueActuel();\n    // Fonction pour gérer la sélection de l'ordre des joueurs \"enfant\"\n    // Il faut que je teste et que j'affiche \"les enfants\" qui jouent\n    const selectionnerOrdreJoueursEnfant = (selectionOrdreJoueurs) => {\n        setOrdreJoueursEnfant(selectionOrdreJoueurs);\n    };\n    const [afficherSelection, setSelection] = useState(true); // Variable d'état pour afficher/cacher la div d'ordre\n    const validerOrdre = () => {\n        selectionnerOrdreJoueursEnfant(enfantsChoisis);\n        // A partir d'ici on récupère l'ordre que les enfants ont choisis\n        setOrdreJoueursEnfant(enfantsChoisis);\n        setOrdreFinal(genererOrdreJoueurs(enfantsChoisis, animateursTries));\n        setSelection(false);\n        setNbTourActuel(nbTourActuel + 1);\n    };\n    useEffect(() => {\n        // console.log(joueursChoisis);\n        // console.log(animateursChoisis);\n    }, [joueursChoisis])\n    // Il faut aussi penser à chaque déplacement, panel d'actions dont un seul qui est réellement intéractif (les questions)\n    // Bouton Tour terminé selon cliquable dès qu'ils ont fait au moins toutes les actions qu'ils peuvent faire\n    return (\n        <>\n            <div>\n                <h3>{nbManches}e Manche - {nbTourActuel}e Tour - role actuel : {roleActuel}</h3>\n                {nbTourActuel === 0 && afficherSelection && (\n                    <div>\n                        <h2>l'ordre des enfants</h2>\n                        <ul>\n                            {enfantsChoisis.map((enfant, index) => (\n                                <li key={enfant.id}>\n                                    {enfant.nom}\n                                    <button onClick={() => deplacerJoueur(index, index - 1)}>▲</button>\n                                    <button onClick={() => deplacerJoueur(index, index + 1)}>▼</button>\n                                </li>\n                            ))}\n                        </ul>\n                        <button onClick={validerOrdre}>Valider l'ordre</button>\n                    </div>\n                )}\n                {!afficherSelection &&  (\n                    <div>\n                        {roleActuel === 'enfant' ?\n                            <>\n                                <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir={joueurActuel.pouvoir} nom={joueurActuel.nom} nbVie={joueurActuel.pv} description={joueurActuel.description} nomThematique={thematiqueActuel} maudit={\"\"} objectif={\"\"} role={roleActuel} img={joueurActuel.image} />\n                                <PanelAction animateurs={animateursTries} thematiques={data.thematique} enfantsTab={ordreJoueursEnfant}/>\n                            </>\n                            :\n                            roleActuel === 'animateur' && (\n                                <>\n                                    <FicheJoueur nbDeplacements={joueurActuel.deplacement} pouvoir=\"\" nom={joueurActuel.nom}\n                                        nbVie={joueurActuel.objectifs.animateurs.points ? 0 : 5 - joueurActuel.objectifs.animateurs.points}\n                                        description={joueurActuel.description} maudit={joueurActuel.maudit}\n                                        objectif={joueurActuel.objectifs.enfants.points ? joueurActuel.objectifs.enfants.points : 0} role={roleActuel} img={joueurActuel.image} nomThematique={thematiqueActuel} objectifImg={joueurActuel.objectifs.animateurs.img} enfantsTab={enfantsChoisis}/>\n                                </>\n                            )\n                        }\n                        <button onClick={gestionNbTours}>Passer au prochain tour</button>\n                    </div>\n                )}\n                {nbManches === 11 && (\n                    <p>C'est fini c'est perdu !</p>\n                )}\n            </div>\n        </>\n    )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}